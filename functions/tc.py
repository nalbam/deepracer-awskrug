# tt-center

import math


MAX_SIGHT = 0.5

MAX_REWARD = 3.0
MIN_REWARD = 0.001

MAX_TIME = 50
MIN_TIME = 20


def reward_function(params):
    reward = 0.0

    x = params["x"]
    y = params["y"]

    racing_track = get_racing_track()

    target_idx, min_idx = draw_ray(params, racing_track, MAX_SIGHT)

    reward += score_steering(params, racing_track[target_idx])

    reward += score_speed(params, racing_track[min_idx])

    reward += score_center(params, racing_track[min_idx])

    return float(reward)


def get_distance(coor1, coor2):
    return math.sqrt(
        (coor1[0] - coor2[0]) * (coor1[0] - coor2[0])
        + (coor1[1] - coor2[1]) * (coor1[1] - coor2[1])
    )


def get_radians(coor1, coor2):
    return math.atan2((coor2[1] - coor1[1]), (coor2[0] - coor1[0]))


def get_degrees(coor1, coor2):
    return math.degrees(get_radians(coor1, coor2))


def get_diff_radians(angle1, angle2):
    diff = (angle1 - angle2) % (2.0 * math.pi)

    if diff >= math.pi:
        diff -= 2.0 * math.pi

    return diff


def get_diff_degrees(angle1, angle2):
    return math.degrees(get_diff_radians(angle1, angle2))


def get_distance_list(car, waypoints):
    dist_list = []
    min_dist = float("inf")
    min_idx = -1

    for i, waypoint in enumerate(waypoints):
        dist = get_distance(car, waypoint)
        if dist < min_dist:
            min_dist = dist
            min_idx = i
        dist_list.append(dist)

    return dist_list, min_dist, min_idx, len(waypoints)


def draw_ray(params, waypoints, sight=1.0):
    car = [params["x"], params["y"]]

    target_dist = params["track_width"] * sight

    dist_list, _, min_idx, length = get_distance_list(car, waypoints)

    target_idx = min_idx

    for i in range(5, int(length * 0.1)):
        index = (min_idx + i) % length
        target_idx = index
        if dist_list[index] >= target_dist:
            break

    return target_idx, min_idx


def score_steering(params, target):
    car = [params["x"], params["y"]]

    # target angle
    target_angle = get_radians(car, target)

    heading = params["heading"]
    steering = params["steering_angle"]

    # target steering
    target_steering = get_diff_degrees(target_angle, math.radians(heading))
    target_steering = max(-30, min(30, target_steering))

    # diff steering
    diff = abs(steering - target_steering)

    score = 1.1 - (diff / 60)

    return max(min(score, MAX_REWARD), MIN_REWARD)


def score_speed(params, target):
    speed = params["speed"]

    # diff speed
    diff = abs(speed - target[2])

    score = 1.1 - (diff / 3)

    return max(min(score, MAX_REWARD), MIN_REWARD)


def score_center(params, target):
    track_width = params["track_width"]

    car = [params["x"], params["y"]]

    center = [target[0], target[0]]

    dist = get_distance(car, center)

    # diff dist
    diff = abs(track_width - dist)

    score = 1.1 - (diff / track_width)

    return max(min(score, MAX_REWARD), MIN_REWARD)


def get_racing_track():
    return [
        [8.45559, 3.02991, 2.55542, 0.06871],
        [8.28132, 3.073, 2.80923, 0.0639],
        [8.10155, 3.10853, 3.06639, 0.05976],
        [7.91708, 3.13728, 3.2, 0.05834],
        [7.7287, 3.16003, 3.2, 0.0593],
        [7.53719, 3.17752, 3.2, 0.0601],
        [7.34331, 3.19048, 3.2, 0.06072],
        [7.14779, 3.1996, 3.2, 0.06117],
        [6.9513, 3.20556, 3.2, 0.06143],
        [6.75433, 3.20892, 3.2, 0.06156],
        [6.55722, 3.21027, 3.2, 0.0616],
        [6.36005, 3.21015, 3.2, 0.06161],
        [6.16282, 3.20903, 3.2, 0.06163],
        [5.9655, 3.20732, 3.2, 0.06167],
        [5.7681, 3.20537, 3.2, 0.06169],
        [5.57059, 3.20324, 3.2, 0.06173],
        [5.37154, 3.2011, 3.2, 0.06221],
        [5.17209, 3.19908, 3.2, 0.06233],
        [4.97211, 3.19726, 3.2, 0.0625],
        [4.77192, 3.19557, 3.2, 0.06256],
        [4.57146, 3.19409, 3.2, 0.06264],
        [4.37083, 3.19283, 3.2, 0.0627],
        [4.17007, 3.19177, 3.2, 0.06274],
        [3.96923, 3.19094, 3.2, 0.06276],
        [3.76833, 3.19033, 3.2, 0.06278],
        [3.56737, 3.18997, 3.2, 0.0628],
        [3.36638, 3.18986, 3.2, 0.06281],
        [3.16537, 3.19005, 3.2, 0.06282],
        [2.96434, 3.19057, 3.15874, 0.06364],
        [2.7633, 3.19145, 2.80114, 0.07177],
        [2.56226, 3.19278, 2.52464, 0.07963],
        [2.36743, 3.19196, 2.30097, 0.08467],
        [2.17687, 3.18743, 2.11526, 0.09012],
        [1.99147, 3.17766, 1.94776, 0.09531],
        [1.81189, 3.16138, 1.78716, 0.1009],
        [1.6387, 3.13751, 1.61755, 0.10808],
        [1.47249, 3.1051, 1.41713, 0.11949],
        [1.31391, 3.06335, 1.41713, 0.11571],
        [1.1637, 3.01161, 1.41713, 0.11211],
        [1.02277, 2.94925, 1.41713, 0.10875],
        [0.89244, 2.87555, 1.41713, 0.10565],
        [0.77478, 2.78961, 1.41713, 0.10281],
        [0.67381, 2.69003, 1.42484, 0.09953],
        [0.58914, 2.57973, 1.4028, 0.09913],
        [0.52081, 2.46085, 1.4028, 0.09774],
        [0.46924, 2.33523, 1.4028, 0.0968],
        [0.43516, 2.20458, 1.4028, 0.09626],
        [0.41903, 2.07071, 1.4028, 0.09612],
        [0.42136, 1.93546, 1.4028, 0.09643],
        [0.44301, 1.80078, 1.41609, 0.09633],
        [0.48397, 1.66864, 1.44887, 0.09548],
        [0.54378, 1.54085, 1.5004, 0.09403],
        [0.62165, 1.41895, 1.57243, 0.09199],
        [0.71657, 1.30412, 1.66613, 0.08942],
        [0.82732, 1.19724, 1.78161, 0.08639],
        [0.95253, 1.09885, 1.91794, 0.08303],
        [1.09075, 1.0092, 2.07342, 0.07946],
        [1.24051, 0.92834, 2.24589, 0.07578],
        [1.4003, 0.8561, 2.43306, 0.07208],
        [1.56868, 0.79219, 2.63274, 0.06841],
        [1.74424, 0.73622, 2.84293, 0.06482],
        [1.92566, 0.68771, 3.06148, 0.06134],
        [2.11169, 0.64617, 3.2, 0.05957],
        [2.30122, 0.61107, 3.2, 0.06023],
        [2.49323, 0.58189, 3.2, 0.06069],
        [2.68686, 0.55815, 3.2, 0.06096],
        [2.88134, 0.5394, 3.2, 0.06106],
        [3.07603, 0.52526, 3.2, 0.061],
        [3.2704, 0.5154, 3.2, 0.06082],
        [3.46404, 0.50957, 3.2, 0.06054],
        [3.65661, 0.50752, 3.2, 0.06018],
        [3.84791, 0.50907, 3.2, 0.05978],
        [4.03784, 0.51407, 3.2, 0.05937],
        [4.22633, 0.52241, 3.2, 0.05896],
        [4.41347, 0.53384, 3.2, 0.05859],
        [4.59941, 0.54805, 3.2, 0.05828],
        [4.78433, 0.56468, 3.2, 0.05802],
        [4.96842, 0.58332, 3.2, 0.05782],
        [5.15187, 0.60353, 3.2, 0.05768],
        [5.33491, 0.62477, 3.2, 0.05758],
        [5.51775, 0.64652, 3.1614, 0.05824],
        [5.69763, 0.668, 3.01607, 0.06006],
        [5.87718, 0.68781, 2.9576, 0.06108],
        [6.05624, 0.70441, 2.9576, 0.0608],
        [6.23473, 0.71653, 2.9576, 0.06049],
        [6.4126, 0.72303, 2.9576, 0.06018],
        [6.58976, 0.72301, 2.9576, 0.0599],
        [6.76615, 0.71594, 2.9576, 0.05969],
        [6.94169, 0.70158, 2.97503, 0.0592],
        [7.11634, 0.68007, 3.06713, 0.05737],
        [7.29011, 0.65183, 3.2, 0.05502],
        [7.46309, 0.61768, 3.03504, 0.05809],
        [7.63534, 0.57844, 2.40475, 0.07347],
        [7.80695, 0.53479, 2.06311, 0.08583],
        [7.97798, 0.48721, 1.83814, 0.09657],
        [8.14846, 0.43617, 1.65975, 0.10722],
        [8.30462, 0.39238, 1.52022, 0.10668],
        [8.45889, 0.35504, 1.40811, 0.11272],
        [8.61015, 0.32722, 1.33097, 0.11556],
        [8.75741, 0.31114, 1.3, 0.11394],
        [8.89971, 0.30825, 1.3, 0.10949],
        [9.03609, 0.31974, 1.3, 0.10528],
        [9.16553, 0.34652, 1.3, 0.10168],
        [9.28687, 0.38937, 1.3, 0.09899],
        [9.39888, 0.44884, 1.3, 0.09755],
        [9.50041, 0.52488, 1.30869, 0.09693],
        [9.59043, 0.61693, 1.34973, 0.09539],
        [9.66798, 0.72405, 1.41569, 0.09341],
        [9.73219, 0.84492, 1.49811, 0.09135],
        [9.78227, 0.97785, 1.58755, 0.08948],
        [9.81757, 1.12084, 1.67427, 0.08797],
        [9.8376, 1.2716, 1.74922, 0.08694],
        [9.84202, 1.42759, 1.80298, 0.08656],
        [9.83071, 1.58616, 1.78921, 0.08885],
        [9.80374, 1.74464, 1.78921, 0.08985],
        [9.76135, 1.90045, 1.78921, 0.09025],
        [9.70397, 2.05126, 1.78921, 0.09018],
        [9.63213, 2.19506, 1.78921, 0.08984],
        [9.54647, 2.33021, 1.78921, 0.08943],
        [9.44768, 2.4555, 1.79041, 0.08911],
        [9.3365, 2.57009, 1.81316, 0.08806],
        [9.21372, 2.67355, 1.86233, 0.08622],
        [9.08015, 2.76579, 1.94132, 0.08361],
        [8.93664, 2.84699, 2.05238, 0.08034],
        [8.78409, 2.91761, 2.19669, 0.07653],
        [8.6234, 2.97829, 2.38997, 0.07187],
    ]
